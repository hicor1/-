"""
Django settings for hello_django project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "*").split(" ")
#DEBUG         = int(os.environ.get("DEBUG", "1"))
DEBUG = 0
SECRET_KEY    = os.environ.get("SECRET_KEY", "foo")

#ALLOWED_HOSTS = ["*"]
#DEBUG = True
#SECRET_KEY = 'c_r-e8v1divj8y+hu@-w=n#$xj#ciuejybd3_(k2h789(mcv8$'


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'app', # 프로젝트 이름 반드시 추가!!

    'import_export', # admin excel import 추가
    'rest_framework', # restframework 등록
    'django.contrib.postgres', # (21.5.11)TrigramSimilarity 때문에 추가함
    'report',
    'APIreport',
    'main',
    'Authentication',
    'APIAuthentication',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'layout')], #여기가 추가됨,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
if DEBUG == 0: # 배포 모드라면,
    DATABASES = {
        "default": {
            "ENGINE":   os.environ.get("SQL_ENGINE",   "django.db.backends.postgresql"),
            "NAME":     os.environ.get("SQL_DATABASE", "report"),
            "USER":     os.environ.get("SQL_USER",     "hicor"),
            "PASSWORD": os.environ.get("SQL_PASSWORD", "dlacodnr1!"),
            "HOST":     os.environ.get("SQL_HOST",     "3.37.42.132"),
            "PORT":     os.environ.get("SQL_PORT",     "4040"),
        }
    }
else: # 개발버전일경우, 로컬pc에 있는 db로 연결한다.
    DATABASES = {
            'default': {
            'ENGINE':   'django.db.backends.postgresql',
            'NAME':     'report',
            'USER':     'hicor',
            'PASSWORD': 'dlacodnr1!',
            'HOST':     '3.37.42.132', # 192.168.0.158도 가능 # 3.37.42.132 # 13.124.35.82
            #'HOST': '180.228.248.188', # 방화벽 인바운드(TCP) & 포트포워딩 5432 필요
            'PORT':     '4040',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
# https://blog.hannal.com/2015/04/start_with_django_webframework_06/
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    #os.path.join(BASE_DIR, 'static2'), # (샘플), 이렇게 추가 가능
    ) # 개발 단계에서 사용하는 정적 파일이 위치, 복수의 파일 가능

STATIC_URL = "/staticfiles/" # 웹 페이지에서 사용할 정적 파일의 최상위 URL 경로, URL로만 존재하는 단위, 이용자 마음대로 정해도 무방
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles") # Django 프로젝트에서 사용하는 모든 정적 파일을 한 곳에 모아넣는 경로

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

LOGIN_REDIRECT_URL ='/' 



##############################################
#### (21.05.02) JWT 로그인기능 추가 ####
##############################################

# (참고) https://dev-yakuza.posstree.com/ko/django/jwt/
'''
import datetime
# 모든 RestAPI에 기본적으로 JWT 탑재

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}


JWT_AUTH = {
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7), # 7일안에 갱신하면됨, 
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=28), # 28일 뒤에는 재 로그인 해야됨
}

'''

##############################################
#### (21.06.10) https등 각종 보안 설정 적용 ####
##############################################

if DEBUG == 0: # 배포 모드라면,
    #pass

    #자동 세션 종료
    SESSION_COOKIE_AGE = 1200 # 20분동안 세션 유지
    SESSION_SAVE_EVERY_REQUEST = True #request가 발생한 시점부터 타임아웃 초기화


    ##아래는 보안관련 설정##
    SECURE_HSTS_SECONDS = 31536000#1year
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER  = True
    #SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    #CSRF_COOKIE_HTTPONLY = True
    #SESSION_COOKIE_PATH = '/;HttpOnly'
    #SESSION_COOKIE_HTTPONLY = True


    SECURE_REFERRER_POLICY = 'origin'
    X_FRAME_OPTIONS = 'SAMEORIGIN'#'DENY'#

    #SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    ##아래는 Admin페이지에 접근할수있는 ip제한##
    ##pip install django-admin-ip-restrictor깔아야됨##
    #RESTRICT_ADMIN=True
    #ALLOWED_ADMIN_IPS=['192.168.130.41', '::1']
    #ALLOWED_ADMIN_IP_RANGES=['192.168.130.41/41', '::/1']
    RESTRICTED_APP_NAMES=['admin']
    TRUST_PRIVATE_IP=True

else: # 개발자 모드라면
    pass


## (21.06.28)로그인 리다이렉트 주소 ##
LOGIN_REDIRECT_URL = '/Authentication/Login'

## (21.07.02) POST요청시 slash 추가 옵션
APPEND_SLASH=True